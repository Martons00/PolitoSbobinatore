performanceing about some application projects. We have the background and related work here, which is something which talks, I mean, it's terrible, but you can at least see some key word. And we have the different parts of these goal oriented requirements engineering. What was done in this preliminary research, some things around, but at the very end, what you have here is that everything was made with GPT-4. And in fact, you see here results of prompt two, results of prompts three, and then here there is a mapping between the API endpoints and low level goals. And here you see not applicable to the current set of APIs. And then here you don't see anything, but here I have an actual endpoint like slash slash statistics, like defi defi. The only thing that they have to do is to do to my Blau and whatever defi is. Like I am not making a training or training or whatever. We will go aåˆ© Okay, so this time we have a microphone, those of the video is working, so that's pretty incredible. So objective of today, I just wanted to provide a brief introduction to the lab that we have seen last time. But anyway, this is an example related to the one about API linking, which maybe was also in your short list of possible selected ones. I mean,. these stuff here was actually already already a paper, so it was a report of something that was completely done, at least in a very preliminary way.
The architecture is here. It is super simple, but it is actually defined there. You have here the links from of the GitHub projects related to the APIs. I take the low level goals and then I try to map them with the API. So this is the exercise. As I said to someone of you, how much time do I need for doing this stuff? I have to be super honest in this experiment here, which I mean, I feel bad even in calling it an experiment. This actually was done in an afternoon because it was like, okay, we set up this idea and we just start to type some random stuff into GPT and get the results. So don't be afraid about the fact that you may need some setup and some setting. Because the actual application, if you are lucky enough, like your prompt work out of the box and you don't have some issues with the setup, you may be able to make everything in a couple of days just to describe the architecture and describe the result. And at least for the application which I am dealing with, as promised, I will provide you additional information for each one of them, because I know that some of them can seem a little bit scary, especially when I talk about testing Android applications. You need to have an Android application environment, plus you need to create some test stages for them. But I will add some additional information, including additional guidance for the skeleton of the whole project by the end of tomorrow.
I will provide you the full descriptions and the steps for all the different application projects that are provided. You have more details later for the creation of user stories. I see that in the project allocation sheet, you have already 11 groups defined with 18, 20, 22, 25, 26 people. So if you need to connect with each other to form a group, you can use this column. And next Monday when the groups formation are closed, I will make a pass on this in class and facilitate some group creation for someone who didn't make it to the group. I actually do have a ground truth in this case. So last time we have said that every time I have a. ground truth, every time. I have something I can compare with, I can compute my precision and. compute my actual results. We call them actual results with the expected results. That will be super simplified in my ground truth at the moment because we are considering exact similarities that we will get there in a while. So there is a when we want to compute the precision and recall we have to cope with the fact that something mustn't be exactly the same with the same words and characters. Of course, this is not optimal, of course, but we will see that. If if I want to see a user story in my. groundtruth, which is which is listed in my list of places and places I want my result is listed and I want it to be listed, I want the same places and the same characters.
In this example, we have just three modules. The first one extract the roles from my requirements. And this guy here will have to extract my roles, a list of the roles with my system. Then I have another prompt, this one, the function extraction. This is not evident from here, but this is actually, I actually have an iteration here because I for each role I extract his functions. At the end of this, I get my functions. So remember the structure of a story as a role. I want to function. So I want the LLM to extract the actors here. The exercise is guided. So here I created three different, I mean placeholders for three alternatives for this prompt. You can also write them yourself. So you can be creative. There is a bit of configuration here with all of them and then we try what happens with them at general configuration. So we have three prompts and we have all three prompts at general Configuration. So then we have a general configuration and we try to make them all a bit different. And we see how we change our precision and we call according to the threshold that we are using. The bonus point here is that we actually see that applied to generation, which is something more. But anyway, without going into that part that we will see next time, in this case, we will make a full example next time. You get the requirements so you have a paragraph of requirements with the actors below with the requirements.
Lama: We have to create a function to extract the roles from my user stories. And then find the unique roles and put them into a list so that they get the expected results for the roles. Then here, once I have two lists, I can compute my positives through positives, positive, positive,. post negatives, precision and recall. And on Monday we can see some examples of that code and then we can build upon the rest of the code. So if you have no questions I will close the room to work until the different room is full. And I mean this is like 35 minutes from now but you can start doing that on Monday. And we have like five minutes from 13 to 13 to work on the different code until we have five minutes to work. So that's what we are going to do. We have like 13 minutes from thirteen to 13. And that's how long it will take us to do the whole thing. So we have to do like six years execution of the prompts. And the reason is simple because otherwise I would need to do six years of execution. So they saw that I. need to make some prompt engineering for this. This will end up at the end of the day at the prompt engineering. So I need to get rid of the prompt and format the results. So here I just need some Python code to open this CSV, get this and flip it so that I remove this and I get I. So nothing shocking. I just have to extract a piece of text from a format of the string. So this function here must give me the role from the stories where I am here.
The total operation is completed in: 234.0050 seconds